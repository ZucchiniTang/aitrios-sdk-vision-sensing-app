// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSEESTIMATION_SMARTCAMERA_H_
#define FLATBUFFERS_GENERATED_POSEESTIMATION_SMARTCAMERA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

namespace SmartCamera {

struct Keypoint2d;
struct Keypoint2dBuilder;

struct PoseEstimationData;
struct PoseEstimationDataBuilder;

struct PoseEstimationTop;
struct PoseEstimationTopBuilder;

struct Keypoint2d FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Keypoint2dBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_SCORE = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float score() const {
    return GetField<float>(VT_SCORE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_SCORE, 4) &&
           verifier.EndTable();
  }
};

struct Keypoint2dBuilder {
  typedef Keypoint2d Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Keypoint2d::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Keypoint2d::VT_Y, y, 0.0f);
  }
  void add_score(float score) {
    fbb_.AddElement<float>(Keypoint2d::VT_SCORE, score, 0.0f);
  }
  explicit Keypoint2dBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Keypoint2d> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Keypoint2d>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Keypoint2d> CreateKeypoint2d(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float score = 0.0f) {
  Keypoint2dBuilder builder_(_fbb);
  builder_.add_score(score);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct PoseEstimationData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PoseEstimationDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PERSON_ID = 4,
    VT_KEYPOINTS = 6
  };
  uint32_t person_id() const {
    return GetField<uint32_t>(VT_PERSON_ID, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<SmartCamera::Keypoint2d>> *keypoints() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<SmartCamera::Keypoint2d>> *>(VT_KEYPOINTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_PERSON_ID, 4) &&
           VerifyOffset(verifier, VT_KEYPOINTS) &&
           verifier.VerifyVector(keypoints()) &&
           verifier.VerifyVectorOfTables(keypoints()) &&
           verifier.EndTable();
  }
};

struct PoseEstimationDataBuilder {
  typedef PoseEstimationData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_person_id(uint32_t person_id) {
    fbb_.AddElement<uint32_t>(PoseEstimationData::VT_PERSON_ID, person_id, 0);
  }
  void add_keypoints(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SmartCamera::Keypoint2d>>> keypoints) {
    fbb_.AddOffset(PoseEstimationData::VT_KEYPOINTS, keypoints);
  }
  explicit PoseEstimationDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PoseEstimationData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PoseEstimationData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PoseEstimationData> CreatePoseEstimationData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t person_id = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SmartCamera::Keypoint2d>>> keypoints = 0) {
  PoseEstimationDataBuilder builder_(_fbb);
  builder_.add_keypoints(keypoints);
  builder_.add_person_id(person_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PoseEstimationData> CreatePoseEstimationDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t person_id = 0,
    const std::vector<::flatbuffers::Offset<SmartCamera::Keypoint2d>> *keypoints = nullptr) {
  auto keypoints__ = keypoints ? _fbb.CreateVector<::flatbuffers::Offset<SmartCamera::Keypoint2d>>(*keypoints) : 0;
  return SmartCamera::CreatePoseEstimationData(
      _fbb,
      person_id,
      keypoints__);
}

struct PoseEstimationTop FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PoseEstimationTopBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PERCEPTION = 4
  };
  const SmartCamera::PoseEstimationData *perception() const {
    return GetPointer<const SmartCamera::PoseEstimationData *>(VT_PERCEPTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PERCEPTION) &&
           verifier.VerifyTable(perception()) &&
           verifier.EndTable();
  }
};

struct PoseEstimationTopBuilder {
  typedef PoseEstimationTop Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_perception(::flatbuffers::Offset<SmartCamera::PoseEstimationData> perception) {
    fbb_.AddOffset(PoseEstimationTop::VT_PERCEPTION, perception);
  }
  explicit PoseEstimationTopBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PoseEstimationTop> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PoseEstimationTop>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PoseEstimationTop> CreatePoseEstimationTop(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<SmartCamera::PoseEstimationData> perception = 0) {
  PoseEstimationTopBuilder builder_(_fbb);
  builder_.add_perception(perception);
  return builder_.Finish();
}

inline const SmartCamera::PoseEstimationTop *GetPoseEstimationTop(const void *buf) {
  return ::flatbuffers::GetRoot<SmartCamera::PoseEstimationTop>(buf);
}

inline const SmartCamera::PoseEstimationTop *GetSizePrefixedPoseEstimationTop(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SmartCamera::PoseEstimationTop>(buf);
}

inline bool VerifyPoseEstimationTopBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SmartCamera::PoseEstimationTop>(nullptr);
}

inline bool VerifySizePrefixedPoseEstimationTopBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SmartCamera::PoseEstimationTop>(nullptr);
}

inline void FinishPoseEstimationTopBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SmartCamera::PoseEstimationTop> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPoseEstimationTopBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SmartCamera::PoseEstimationTop> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SmartCamera

#endif  // FLATBUFFERS_GENERATED_POSEESTIMATION_SMARTCAMERA_H_
