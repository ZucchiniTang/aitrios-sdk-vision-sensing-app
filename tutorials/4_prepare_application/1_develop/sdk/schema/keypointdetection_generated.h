// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_KEYPOINTDETECTION_SMARTCAMERA_H_
#define FLATBUFFERS_GENERATED_KEYPOINTDETECTION_SMARTCAMERA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

namespace SmartCamera {

struct Keypoint2d;
struct Keypoint2dBuilder;

struct BoundingBox;
struct BoundingBoxBuilder;

struct Person;
struct PersonBuilder;

struct KeypointDetection;
struct KeypointDetectionBuilder;

struct Keypoint2d FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Keypoint2dBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_CONFIDENCE = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float confidence() const {
    return GetField<float>(VT_CONFIDENCE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_CONFIDENCE, 4) &&
           verifier.EndTable();
  }
};

struct Keypoint2dBuilder {
  typedef Keypoint2d Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(Keypoint2d::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(Keypoint2d::VT_Y, y, 0.0f);
  }
  void add_confidence(float confidence) {
    fbb_.AddElement<float>(Keypoint2d::VT_CONFIDENCE, confidence, 0.0f);
  }
  explicit Keypoint2dBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Keypoint2d> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Keypoint2d>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Keypoint2d> CreateKeypoint2d(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float confidence = 0.0f) {
  Keypoint2dBuilder builder_(_fbb);
  builder_.add_confidence(confidence);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct BoundingBox FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BoundingBoxBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_WIDTH = 8,
    VT_HEIGHT = 10,
    VT_CONFIDENCE = 12
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float width() const {
    return GetField<float>(VT_WIDTH, 0.0f);
  }
  float height() const {
    return GetField<float>(VT_HEIGHT, 0.0f);
  }
  float confidence() const {
    return GetField<float>(VT_CONFIDENCE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_WIDTH, 4) &&
           VerifyField<float>(verifier, VT_HEIGHT, 4) &&
           VerifyField<float>(verifier, VT_CONFIDENCE, 4) &&
           verifier.EndTable();
  }
};

struct BoundingBoxBuilder {
  typedef BoundingBox Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(BoundingBox::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(BoundingBox::VT_Y, y, 0.0f);
  }
  void add_width(float width) {
    fbb_.AddElement<float>(BoundingBox::VT_WIDTH, width, 0.0f);
  }
  void add_height(float height) {
    fbb_.AddElement<float>(BoundingBox::VT_HEIGHT, height, 0.0f);
  }
  void add_confidence(float confidence) {
    fbb_.AddElement<float>(BoundingBox::VT_CONFIDENCE, confidence, 0.0f);
  }
  explicit BoundingBoxBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BoundingBox> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BoundingBox>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BoundingBox> CreateBoundingBox(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float width = 0.0f,
    float height = 0.0f,
    float confidence = 0.0f) {
  BoundingBoxBuilder builder_(_fbb);
  builder_.add_confidence(confidence);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct Person FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEYPOINTS = 4,
    VT_BOUNDING_BOX = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<SmartCamera::Keypoint2d>> *keypoints() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<SmartCamera::Keypoint2d>> *>(VT_KEYPOINTS);
  }
  const SmartCamera::BoundingBox *bounding_box() const {
    return GetPointer<const SmartCamera::BoundingBox *>(VT_BOUNDING_BOX);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEYPOINTS) &&
           verifier.VerifyVector(keypoints()) &&
           verifier.VerifyVectorOfTables(keypoints()) &&
           VerifyOffset(verifier, VT_BOUNDING_BOX) &&
           verifier.VerifyTable(bounding_box()) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_keypoints(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SmartCamera::Keypoint2d>>> keypoints) {
    fbb_.AddOffset(Person::VT_KEYPOINTS, keypoints);
  }
  void add_bounding_box(::flatbuffers::Offset<SmartCamera::BoundingBox> bounding_box) {
    fbb_.AddOffset(Person::VT_BOUNDING_BOX, bounding_box);
  }
  explicit PersonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Person> CreatePerson(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SmartCamera::Keypoint2d>>> keypoints = 0,
    ::flatbuffers::Offset<SmartCamera::BoundingBox> bounding_box = 0) {
  PersonBuilder builder_(_fbb);
  builder_.add_bounding_box(bounding_box);
  builder_.add_keypoints(keypoints);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Person> CreatePersonDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<SmartCamera::Keypoint2d>> *keypoints = nullptr,
    ::flatbuffers::Offset<SmartCamera::BoundingBox> bounding_box = 0) {
  auto keypoints__ = keypoints ? _fbb.CreateVector<::flatbuffers::Offset<SmartCamera::Keypoint2d>>(*keypoints) : 0;
  return SmartCamera::CreatePerson(
      _fbb,
      keypoints__,
      bounding_box);
}

struct KeypointDetection FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef KeypointDetectionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PERSONS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<SmartCamera::Person>> *persons() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<SmartCamera::Person>> *>(VT_PERSONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PERSONS) &&
           verifier.VerifyVector(persons()) &&
           verifier.VerifyVectorOfTables(persons()) &&
           verifier.EndTable();
  }
};

struct KeypointDetectionBuilder {
  typedef KeypointDetection Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_persons(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SmartCamera::Person>>> persons) {
    fbb_.AddOffset(KeypointDetection::VT_PERSONS, persons);
  }
  explicit KeypointDetectionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<KeypointDetection> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<KeypointDetection>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<KeypointDetection> CreateKeypointDetection(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<SmartCamera::Person>>> persons = 0) {
  KeypointDetectionBuilder builder_(_fbb);
  builder_.add_persons(persons);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<KeypointDetection> CreateKeypointDetectionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<SmartCamera::Person>> *persons = nullptr) {
  auto persons__ = persons ? _fbb.CreateVector<::flatbuffers::Offset<SmartCamera::Person>>(*persons) : 0;
  return SmartCamera::CreateKeypointDetection(
      _fbb,
      persons__);
}

inline const SmartCamera::KeypointDetection *GetKeypointDetection(const void *buf) {
  return ::flatbuffers::GetRoot<SmartCamera::KeypointDetection>(buf);
}

inline const SmartCamera::KeypointDetection *GetSizePrefixedKeypointDetection(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SmartCamera::KeypointDetection>(buf);
}

inline bool VerifyKeypointDetectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SmartCamera::KeypointDetection>(nullptr);
}

inline bool VerifySizePrefixedKeypointDetectionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SmartCamera::KeypointDetection>(nullptr);
}

inline void FinishKeypointDetectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SmartCamera::KeypointDetection> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedKeypointDetectionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SmartCamera::KeypointDetection> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace SmartCamera

#endif  // FLATBUFFERS_GENERATED_KEYPOINTDETECTION_SMARTCAMERA_H_
